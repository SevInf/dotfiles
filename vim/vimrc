set encoding=utf-8
scriptencoding utf-8
set nocompatible

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif

call plug#begin("~/.vim/bundle")

Plug 'scrooloose/nerdcommenter'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-fugitive'
Plug 'w0rp/ale'
Plug 'scrooloose/nerdtree'
Plug 'joshdick/onedark.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'Raimondi/delimitMate'
Plug 'vim-scripts/camelcasemotion'
Plug 'Yggdroot/indentLine'
Plug 'editorconfig/editorconfig-vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-rooter'
Plug 'janko-m/vim-test'
Plug 'jszakmeister/vim-togglecursor'
Plug 'embear/vim-localvimrc'
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
call plug#end()

filetype plugin on
filetype plugin indent on

set number
set relativenumber

set tabstop=4
set shiftwidth=4
set shiftround
set expandtab
set smartindent
set clipboard=unnamed

" persistent undo
set undofile
set undodir=~/.vim/undodir
set undolevels=1000
set undoreload=10000

" don't show scrollbars, toolbar, menu
set guioptions+=rlTm
set guioptions-=rlTm

"color scheme
set termguicolors
colorscheme onedark

" define a group for autocommands
augroup vimrc
    autocmd!

    " Tabstop 2 for some files
    autocmd FileType yaml setlocal tabstop=2 shiftwidth=2
    autocmd FileType json setlocal tabstop=2 shiftwidth=2
    autocmd FileType coffee setlocal tabstop=2 shiftwidth=2
    autocmd FileType jade setlocal tabstop=2 shiftwidth=2
    autocmd FileType ruby setlocal tabstop=2 shiftwidth=2

    " CocoaPods
    autocmd BufNewFile,BufRead Podfile,*.podspec      set filetype=ruby

    autocmd FileType markdown call StartMarkdownMode()

augroup END

" Key maps
let g:mapleader=","
noremap <leader>f <esc>:Files<cr>
nnoremap <leader>b <esc>:Buffers<cr>
noremap <leader>g <esc>:Ag<cr>
nnoremap <leader>n :NERDTreeToggle<cr>
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <leader>t :TagbarToggle<cr>
noremap <C-Left> <esc>:tabprevious<cr>
noremap <C-h> <esc>:tabprevious<cr>
noremap <C-Right> <esc>:tabnext<cr>
noremap <C-l> <esc>:tabnext<cr>
nnoremap H ^
nnoremap L $
nnoremap Q <nop>
nnoremap <esc> :noh<return><esc>

" Hard mode
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" Abbriviations
iabbrev filed field
iabbrev Filed Field

" case-insensitive :w
command! W normal :w

" indentLine
let g:indentLine_color_gui = '#585858'
let g:indentLine_color_term = 239
let g:indentLine_char = '┊'

" markdown code highlight
let g:markdown_fenced_languages = [
    \ 'javascript',
    \ 'js=javascript',
    \ 'php',
    \ 'graphql',
    \ 'json'
\ ]

" airline
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline#extensions#tagbar#enabled = 0
let g:airline_exclude_preview = 0
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

" ale
let g:ale_linters = {
\   'javascript': ['eslint', 'flow'],
\}

let g:ale_fixers = {
\   'javascript': ['prettier'],
\   'typescript': ['prettier'],
\   'markdown': ['prettier'],
\   'json': ['prettier'],
\}

let g:ale_fix_on_save = 1

let g:ale_sign_error = '✘'
let g:ale_sign_warning = '⚠'
" no-conceal cursor for indent line
let g:indentLine_noConcealCursor=""

" no conceal for json
let g:vim_json_syntax_conceal = 0

" no conceal for markdown
let g:vim_markdown_conceal = 0

" Vim test mapping
nmap tn :TestNearest<CR>
nmap tt :TestLast<CR>

" NERDTree
let g:NERDTreeQuitOnOpen = 1

" Vim rooter
let g:rooter_cd_command = 'lcd'

" enable jsx in js files
let g:jsx_ext_required = 0

" enable flow syntax
let g:javascript_plugin_flow = 1

" gitgutter
let g:gitgutter_sign_added = '█'
let g:gitgutter_sign_modified = '█'
let g:gitgutter_sign_removed = '█'
let g:gitgutter_sign_removed_first_line = '-'
let g:gitgutter_sign_modified_removed = '█'

set cmdheight=2
let g:echodoc_enable_at_startup = 1

" Allow to pick completion with arrow keys
inoremap <expr><Down> pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr><Up> pumvisible() ? "\<C-p>" : "\<Up>"

" Neovim-specific settings
if has('nvim')
    augroup nvimrc
        autocmd!
        autocmd WinEnter term://* startinsert
    augroup END

    set inccommand=split
endif

if filereadable('~/.vim/vimrc.local')
    source '~/.vim/vimrc.local'
endif

function! StartMarkdownMode()
    setlocal spell
    setlocal spelllang=en_us,ru_ru
endfunction

function! EditAlternate()
    let name = StripAllExtensions(expand('%:t'))
    call fzf#vim#files('', {
    \  'source': 'ag -g ' . shellescape(name),
    \ })
endfunction

function! StripAllExtensions(filename)
    let name = a:filename
    let noext = fnamemodify(name, ':r')
    while name != noext
        let name = noext
        let noext = fnamemodify(name, ':r')
    endwhile
    return name
endfunction

nnoremap <C-8> :call EditAlternate()<cr>

